// Code generated by MockGen. DO NOT EDIT.
// Source: internal/firstname/service.go

// Package mock_firstname is a generated GoMock package.
package mock_firstname

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFirstNameService is a mock of FirstNameService interface.
type MockFirstNameService struct {
	ctrl     *gomock.Controller
	recorder *MockFirstNameServiceMockRecorder
}

// MockFirstNameServiceMockRecorder is the mock recorder for MockFirstNameService.
type MockFirstNameServiceMockRecorder struct {
	mock *MockFirstNameService
}

// NewMockFirstNameService creates a new mock instance.
func NewMockFirstNameService(ctrl *gomock.Controller) *MockFirstNameService {
	mock := &MockFirstNameService{ctrl: ctrl}
	mock.recorder = &MockFirstNameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirstNameService) EXPECT() *MockFirstNameServiceMockRecorder {
	return m.recorder
}

// FindBySelf mocks base method.
func (m *MockFirstNameService) FindBySelf(ctx context.Context, query string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySelf", ctx, query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySelf indicates an expected call of FindBySelf.
func (mr *MockFirstNameServiceMockRecorder) FindBySelf(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySelf", reflect.TypeOf((*MockFirstNameService)(nil).FindBySelf), ctx, query)
}

// FindBySymbol mocks base method.
func (m *MockFirstNameService) FindBySymbol(ctx context.Context, query string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySymbol", ctx, query)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySymbol indicates an expected call of FindBySymbol.
func (mr *MockFirstNameServiceMockRecorder) FindBySymbol(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySymbol", reflect.TypeOf((*MockFirstNameService)(nil).FindBySymbol), ctx, query)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/counter/service.go

// Package mock_counter is a generated GoMock package.
package mock_counter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCounterService is a mock of CounterService interface.
type MockCounterService struct {
	ctrl     *gomock.Controller
	recorder *MockCounterServiceMockRecorder
}

// MockCounterServiceMockRecorder is the mock recorder for MockCounterService.
type MockCounterServiceMockRecorder struct {
	mock *MockCounterService
}

// NewMockCounterService creates a new mock instance.
func NewMockCounterService(ctrl *gomock.Controller) *MockCounterService {
	mock := &MockCounterService{ctrl: ctrl}
	mock.recorder = &MockCounterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterService) EXPECT() *MockCounterServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCounterService) Get(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCounterServiceMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCounterService)(nil).Get), ctx)
}

// SetDecrement mocks base method.
func (m *MockCounterService) SetDecrement(ctx context.Context, num string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDecrement", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDecrement indicates an expected call of SetDecrement.
func (mr *MockCounterServiceMockRecorder) SetDecrement(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDecrement", reflect.TypeOf((*MockCounterService)(nil).SetDecrement), ctx, num)
}

// SetIncrement mocks base method.
func (m *MockCounterService) SetIncrement(ctx context.Context, num string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIncrement", ctx, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIncrement indicates an expected call of SetIncrement.
func (mr *MockCounterServiceMockRecorder) SetIncrement(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIncrement", reflect.TypeOf((*MockCounterService)(nil).SetIncrement), ctx, num)
}
